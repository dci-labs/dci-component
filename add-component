#!/bin/bash

components_file=$(mktemp)

function clean_up() {
    rm -f $components_file
}

trap clean_up EXIT

# Get the latest (last 6) versios of a topic
function get_topic_versions(){
    local topic_type=${1^^}
    declare -A products
    products=( [OCP]=OpenShift [OSP]=OpenStack [RHEL]=RHEL )

    # get product from topic
    product=${products[${topic_type}]}

    if [[ -z ${product} ]]; then
        echo "Invalid Topic Type: ${topic_type}"
        echo "Valid Topic Types: ${VALID_DCI_TOPIC_TYPES[*]}"
        exit 1
    fi

    # Get Product ID
    product_id=$( dcictl \
                  --format json \
                  product-list \
                  --where "name:${product}" |
              jq -r '.products[].id'
    )

    all_versions=( $( dcictl \
                      --format json \
                      topic-list \
                      --where "status:active" \
                      --where "product_id:${product_id}" \
                      --where "name:${topic_type}*" |
                  jq -r '.topics[0:6][] | .name')
    )
    echo ${all_versions[@]}
}

VALID_DCI_RELEASE_TAGS=(
    dev
    candidate
    ga
)

VALID_DCI_TOPIC_TYPES=(
    OCP
    OSP
    RHEL
)

# API Secrets
DCI_CLIENT_ID=${INPUT_DCICLIENTID}
DCI_API_SECRET=${INPUT_DCIAPISECRET}
DCI_CS_URL=${INPUT_DCICSURL}
export DCI_CLIENT_ID
export DCI_API_SECRET
export DCI_CS_URL

# Required Inputs
TOPICS=(${INPUT_DCITOPICS//,/ })
COMPONENT_NAME=${INPUT_COMPONENTNAME} 
COMPONENT_VERSION=${INPUT_COMPONENTVERSION} 
COMPONENT_RELEASE=${INPUT_COMPONENTRELEASE} 

# Optional Inputs
COMPONENT_TAGS=${INPUT_COMPONENTTAGS}
COMPONENT_URL=${INPUT_COMPONENTURL} 
COMPONENT_DATA=${INPUT_COMPONENTDATA} 

# componentRelease
if ! grep -q "${COMPONENT_RELEASE,,}" <<< "${VALID_DCI_RELEASE_TAGS[@]}"; then
    echo "Invalid Release: ${COMPONENT_RELEASE}"
    echo "Valid Releases: ${VALID_DCI_RELEASE_TAGS[@]}"
    exit 1
fi

# componentTags
if [[ -n ${COMPONENT_TAGS} ]]; then
    tags="--tags  ${COMPONENT_TAGS}"
fi

# componentURL
if [[ -n ${COMPONENT_URL} ]]; then
    if ! grep -iqP "^https?://" <<< "${COMPONENT_URL}"; then
        echo "Invalid URL schema, must begin with 'http(s)://': ${COMPONENT_URL}"
        exit 1
    fi
    url="--url ${COMPONENT_URL}"
fi

# componentData
if [[ -n ${COMPONENT_DATA} ]]; then
    jq . <<< "${COMPONENT_DATA}" > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        echo "Invalid JSON in dciComponentData"
        exit 1
    fi
    data="--data $(jq -c . <<<${COMPONENT_DATA})"
fi

# dciTopicVersion
if [[ -z "${TOPICS[*]}" ]]; then
    echo "No topics provided"
    exit 1
fi

# Detect topic wildcard "all-<TOPIC_TYPE>"
if [[ ${#TOPICS[@]} -eq 1 ]] && grep -q all- <<< "${TOPICS[0]}"; then
    old_topic=${TOPICS[0]}
    TOPICS=( $(get_topic_versions "${TOPICS[0]#all-*}") )
    if [[ $? -ne 0 ]]; then
        echo "Failed to get versions for ${old_topic}"
        exit 1
    fi
fi

for topic in ${TOPICS[@]}; do
    output=$( \
        dci-create-component \
        --format json \
        ${topic} \
        "${COMPONENT_NAME}" \
        ${COMPONENT_VERSION} \
        ${COMPONENT_RELEASE} \
        ${tags} ${url} ${data}
    )
    status_code=$(jq -r .status_code <<< "${output}")
    # Component already exists, retrieve it
    if [[ "${status_code}" -eq "409" ]]; then
        topic_id=$(jq -r .message <<< "${output}" |
            grep -oP "'topic_id': '[^,]+" |
            cut -d "'" -f4
        )
        type=$(jq -r .message <<< "${output}" |
            grep -oP "'type': '[^,]+" |
            cut -d "'" -f4
        )
        name=$(jq -r .message <<< "${output}" |
            grep -oP "'name': '[^,]+" |
            cut -d "'" -f4
        )
        query="type:${type},version:${COMPONENT_VERSION},name:${name}"
        component=$(\
            dcictl \
            --format json \
            component-list \
            --topic-id ${topic_id} \
            --where "${query}" |
            jq -r '.components[0]'
        )
        if [[ "${component}" == "null" ]]; then
            echo "Failed to find component ${name}"
            exit 1
        fi
        output='{"component": '${component}'}'
    elif [[ "${status_code}" -ne "null" ]]; then
        echo "Failed to create component for ${COMPONENT_NAME}-${COMPONENT_VERSION}"
        exit 1
    fi
    jq . <<< "$output" >> ${components_file}
done

echo "components=$(jq -s -c '.' ${components_file})" >> "${GITHUB_OUTPUT}"
